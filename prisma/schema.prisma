// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  MANAGER
  WORKER
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String
  password  String
  role      UserRole @default(WORKER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ArrivalStatus {
  UPCOMING
  IN_PROGRESS
  FINISHED
}

model Arrival {
  id                  String        @id @default(cuid())
  arrivalNumber       String        @unique
  title               String
  supplier            String
  expectedArrivalDate DateTime
  actualArrivalDate   DateTime?
  finishDate          DateTime?
  status              ArrivalStatus @default(UPCOMING)
  summary             String?

  // Expected Quantities
  expected_pallets   Int
  expected_boxes     Int
  expected_kilograms Float

  // Actual Quantities
  actual_pallets   Int?
  actual_boxes     Int?
  actual_kilograms Float?

  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ProductCondition {
  NEW
  USED
  DAMAGED
}

enum ProductCategory {
  ELECTRONICS
  FASHION
  GROCERY
  FURNITURE
  SPORTS
  AUTOMOTIVE
  HOME_APPLIANCES
  TOYS
  BOOKS
  HEALTH
  JEWELRY
}

enum ProductStyle {
  CASUAL
  FORMAL
  SPORTY
  TRADITIONAL
  STREETWEAR
  VINTAGE
  MINIMALIST
  LUXURY
  INDUSTRIAL
  MODERN
  TECH
  FUNCTIONAL
}

model Product {
  id          String            @id @default(cuid())
  name        String
  sku         String
  description String?
  barcode     String?           @unique
  brand       Brand             @relation(fields: [brandId], references: [id], onDelete: Cascade)
  brandId     String
  category    ProductCategory?
  size        String?
  color       String?
  style       ProductStyle?
  condition   ProductCondition? @default(NEW)
  quantity    Int?
  added       Boolean           @default(false)
  arrival     Arrival           @relation(fields: [arrivalId], references: [id], onDelete: Cascade)
  arrivalId   String
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

model Brand {
  id          String  @id @default(cuid())
  name        String  @unique
  description String?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Product   Product[]
}
